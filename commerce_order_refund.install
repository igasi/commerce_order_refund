<?php
	

/**
* Implements hook_install().
*/

function commerce_order_refund_install() {
	
	_commerce_order_refund_add_entity_reference_field();
  	
}

/**
* Auxiliary function for create a entity reference field in order entity.
*/
function _commerce_order_refund_add_entity_reference_field(){

$field_name = 'field_order_refund_reference';
 
 // Make sure the field doesn't already exist.
 if (!field_info_field($field_name)) {
   // Create the field.
   $field = array(
     'field_name' => $field_name,
     'type' => 'entityreference',
     'settings' => array(
       'target_type' => 'commerce_order',
       'handler' => 'base',
       'handler_settings' => array(
         'target_bundles' => array('associate')
       ),
     ),
   );
   
   field_create_field($field);
 
   // Create the instance.
   $instance = array(
     'field_name' => $field_name,
     'entity_type' => 'commerce_order',
     'bundle' => 'commerce_order',
     'label' => 'Order refund reference',
     'description' => 'Provide a commerce order refund reference field',
     'required' => TRUE,
     'widget' => array(),
     'display' => array(
       'default' => array(
         'label' => 'hidden',
       ),
     ),
   );
 
   field_create_instance($instance);
   /*
   drupal_set_message(t('!field_name was added successfully.', array(
     '!field_name' => $field_name,
   )));
   */
 }
		
}


/***************************************************************/

/**
* Implements hook_uninstall().
*/

function commerce_order_refund_uninstall() {

	_commerce_order_refund_delete_entity_reference_field();

}



/**
* Function auxiliary for delete a taxonomy term field in order entity.
*/
function _commerce_order_refund_delete_entity_reference_field(){
//deletefield
	$field_name = 'field_order_refund_reference';
	$field = field_info_field($field_name);
	if ( isset($field) ){
		$result = db_truncate('field_data_'.$field_name)->execute();
		field_delete_field($field_name);
		//update delete the field
		field_purge_batch(2);
	}
}
