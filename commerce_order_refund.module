<?php
/**
 * @file
 * Implements orders refunds for Drupal Commerce.
 */

/**
 * Implements hook_menu().
 */
function commerce_order_refund_menu() {
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/order_refund'] = array(
    'title' => 'Order refund',
    'page callback' => 'commerce_order_refund_form_wrapper',
    'page arguments' => array(3, 5),
    'access callback' => 'commerce_payment_transaction_access',
    'access arguments' => array('order_refund_permission',5),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 10,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function commerce_order_refund_permission() {
  return array(
    'order_refund_permission' => array(
      'title' => t('Order refund permissions'),
      'description' => t('Allow refund management for orders.'),
      'warning' => t('Allowing user to perform refunds can affect commerce reports.')
    )
  );
}

/**
 * Implements hook_menu_contextual_links_alter().
 *
 * Remove the order refund link from the orders operations if the order
 * can not be refunded.
 */
function commerce_order_refund_menu_contextual_links_alter(&$links, $router_item, $root_path) {
  /*
  if (isset($links['commerce-payment-transaction-reverse'])) {
    if (!commerce_order_refund_transaction_reversible($router_item['page_arguments'][1])) {
      unset($links['commerce-payment-transaction-reverse']);
    }
  }
  */
}

/**
 * Page callback for the reverse payment page.
 */
function commerce_order_refund_form_wrapper($order, $transaction) {
  // Add the breadcrumb for the form's location.
  commerce_payment_ui_set_order_breadcrumb($order);

  return drupal_get_form('commerce_order_refund_form', $order, $transaction);
}

/**
 * Form callback: confirmation form for reversing a transaction.
 *
 * @see confirm_form()
 */
function commerce_order_refund_form($form, &$form_state, $order, $transaction) {
  $form_state['order'] = $order;
  $form_state['transaction'] = $transaction;

  // Load and store the payment method.
  $payment_method = commerce_payment_method_load($transaction->payment_method);
  $form_state['payment_method'] = $payment_method;

  // Add a required comment element.
  $form['comment'] = array(
    '#type' => 'textarea',
    '#title' => t('Comment'),
    '#description' => t('Explanation for why the order payment was refunded.'),
    '#required' => TRUE,
  );

  $form['#validate'][] = 'commerce_order_refund_form_validate';
  $form['#submit'][] = 'commerce_order_refund_form_submit';

  $form = confirm_form(
    $form,
    t('Are you sure you want to refund this transaction?'),
    'admin/commerce/orders/' . $form_state['order']->order_id . '/payment',
    '<p>' . t(
       '@amount paid via %method on @date.',
      array(
        '@amount' => commerce_currency_format($transaction->amount, $transaction->currency_code),
        '%method' => $payment_method['title'],
        '@date' => format_date($transaction->created, 'short'),
      )
    ) . '</p>',
    t('Refund'),
    t('Cancel'),
    'confirm'
  );

  return $form;
}

/**
 * Validation callback for the reverse payment form.
 *
 * Verifies that the payment has not already been reversed.
 */
function commerce_order_refund_form_validate($form, &$form_state) {

  if ($form_state['order']->status == 'refunded' || $form_state['order']->status == 'refund') {
    form_set_error('Order', t('Order !id has already been refunded.', array('!id' => $form_state['order']->order_id)));
  }

}

/**
 * Submit callback for the reverse payment form.
 */
function commerce_order_refund_form_submit($form, &$form_state) {
  //commerce_reverse_payments_reverse_payment($form_state['transaction'], $form_state['values']['comment']);
  $new_order_id = commerce_order_refund_execute($form_state['order'], $form_state['values']['comment']);
  drupal_set_message(t('Refunded order %order_id.', array('%order_id' => $form_state['order']->order_id)));

  // Set the form redirect back to the payment page for the order.
  $form_state['redirect'] = 'admin/commerce/orders/' . $new_order_id;
}

/**
 * Refund an existing order with transaction by creating a new transaction to offset it.
 * @param stdClass $order
 *   Transaction to be refunded.
 * @param string $comment
 *   Comment explaining why the payment was refunded.
 */
function commerce_order_refund_execute($order, $comment) {
  
  global $user;
  $entity_type = 'commerce_order';

  //Get pproducts to order refund
  $lis = $order->commerce_line_items['und'];
  $profile_id = $order->commerce_customer_billing['und'][0]['profile_id'];

  foreach ($lis as $li ){
    //$lil[] = commerce_line_item_load($li['line_item_id']);
    $li_loaded = commerce_line_item_load($li['line_item_id']);
    //validate line item type
    if ( $li_loaded->type == 'shipping' ){
      $li_wrapper = entity_metadata_wrapper('commerce_line_item', $li_loaded);
      //set negative shipping
      $shipping_unit_price = $li_wrapper->commerce_unit_price->value();
      $shipping_unit_price['amount'] = $shipping_unit_price['amount'] * -1 ;
      $shipping_unit_price['data']['components'][0]['price']['amount'] =  $shipping_unit_price['data']['components'][0]['price']['amount'] * -1 ;

      $products[] = array(
        'type' => $li_loaded->type,
        'product_id' => NULL,
        'shipping_name' => $li_loaded->commerce_shipping_service['und'][0]['value'],
        'shipping_unit_price' => $shipping_unit_price,
        'quantity' => ($li_loaded->quantity * -1)
        );

    }else if ( $li_loaded->type == 'product' ){

      $products[] = array(
        'type' => $li_loaded->type,
        'product_id' => $li_loaded->commerce_product['und'][0]['product_id'],
        'shipping_name' => NULL,
        'shipping_unit_price' => NULL,
        'quantity' => ($li_loaded->quantity * -1)
        );

    }

  }

  //create a new order refund
  $new_order = commerce_order_new( $user->uid , 'refund' );
  // Save the order so its ID is assigned.
  commerce_order_save( $new_order );

  $order_wrapper = entity_metadata_wrapper ( $entity_type , $new_order );

  foreach ($products as $product_to_refund) {
    if ($product_to_refund['type']=='product') {

      $product = commerce_product_load ( $product_to_refund['product_id'] );
      // Create a line item with  product.
      $line_item = commerce_product_line_item_new( $product , $product_to_refund['quantity'] , $new_order->order_id );

    }else if ($product_to_refund['type']=='shipping') {

      // Create a line item with  shipping.
      $line_item = commerce_shipping_line_item_new($product_to_refund['shipping_name'], $product_to_refund['shipping_unit_price'], $new_order->order_id);

    }

    // Save the line item to get its ID.
    commerce_line_item_save ( $line_item );

    // Add the line item to the order using the wrapper.
    $order_wrapper->commerce_line_items[] = $line_item;
  }
  //add order_id to refund
  $order_wrapper->order_refund_reference->set(intval($order->order_id));
  //add comment refund
  $order_wrapper->refund_comment = $comment;
  //add profile to billing and shipping information
  $order_wrapper->commerce_customer_billing = $profile_id;
  $order_wrapper->commerce_customer_shipping = $profile_id;

  // Save the order.
  $order_wrapper->save();

  //update status original order to refunded
  commerce_order_status_update($order, 'refunded');
  //drupal_set_message("<pre> new order:" . print_r($order_wrapper, 1) . "</pre>");

  return $new_order->order_id;
}




/**
 * Define new status. Refunded
 */

/**
 * Implements hook_commerce_order_status_info().
 */

function commerce_order_refund_commerce_order_status_info(){
  $order_statuses['refunded'] = array(
    'name' => 'refunded',
    'title' => t('Refunded'),
    'cart' => false,
    'state' => 'refund',
    'weight' => 10,
    'status' => true
    );

$order_statuses['refund'] = array(
    'name' => 'refund',
    'title' => t('Refund'),
    'cart' => false,
    'state' => 'refund',
    'weight' => 11,
    'status' => true
    );

 return $order_statuses;

}

/**
 * Implements hook_commerce_order_state_info().
 */

function commerce_order_refund_commerce_order_state_info(){
  $order_statuses['refund'] = array(
    'name' => 'refund',
    'title' => t('Refund'),
    'cart' => false,
    'state' => 'refund',
    'weight' => 10,
    'status' => true
    );

 return $order_statuses;

}
       